using System.Data;
using NHibernate.SqlCommand;

namespace NHibernate.Dialect
{
    /// <summary>
    /// Summary description for IdmsDialect.
    /// This dialect is intended to work with CA IDMS r16 and r17.
    /// </summary>
    /// <remarks>
    /// The IdmsDialect defaults the following configuration properties:
    /// <list type="table">
    ///		<listheader>
    ///			<term>ConnectionDriver</term>
    ///			<description>NHibernate.Driver.OdbcDriver</description>
    ///			<term>PrepareSql</term>
    ///			<description>true</description>
    ///		</listheader>
    ///		<item>
    ///			<term>connection.driver_class</term>
    ///			<description><see cref="NHibernate.Driver.OdbcDriver" /></description>
    ///		</item>
    /// </list>
    /// <para>Prerequisites</para>
    /// <list type="bullet">
    ///     <item>CA IDMS Server r16.1 or later</item>
    ///     <item>CA IDMS Database SQL Option</item>
    /// </list>
    /// <para>Known Limitations</para>
    /// <list type="bullet">
    ///     <item>
    ///         CA IDMS r16 and earlier does not support ANSI join syntax, although 
    ///         theta-style inner joins are supported.  Outer joins must be performed
    ///         using the CA IDMS <code>PRESERVE</code> SQL extension.
    ///     </item>
    ///     <item>
    ///         <code>SELECT ... FOR UPDATE</code> is used in CA IDMS for positioned update, not
    ///         for locking. Pessimistic locking is therefore not supported.
    ///     </item>
    ///     <item>
    ///         Correct CA IDMS DDL syntax cannot be generated by the hbm2ddl tool, even
    ///         with the dialect methods coded appropriately.  As a result, DDL cannot be
    ///         exported directly to the DBMS.  Instead, export to a file, modify as
    ///         required, and use as input to the IDMSBCF tool.
    ///     </item>
    ///     <item>
    ///         CA IDMS does not support comments in SQL commands.  Set property
    ///         <code>use_sql_comments</code> to <code>false</code>.
    ///     </item>
    ///     <item>
    ///         CA IDMS does not support subqueries in the <code>SELECT</code> projection list.
    ///         The following is therefore invalid: 
    ///         <code>SELECT (SELECT COUNT(*) FROM ITEM I WHERE I.ITEM_ID = ITEM_ID) FROM BID</code>
    ///     </item>
    /// </list>
    /// <para>Notes</para>
    /// This dialect's methods write debug-level messages to the Apache commons-logging API.
    /// If you are using Apache Log4j, you can enable logging by setting the 
    /// <code>log4j.logger.org.hibernate property</code> to <code>DEBUG</code>. 
    /// The log entries will also be written to the CA IDMS Server log if a connection exists 
    /// at that time and one of the CA IDMS trace options is enabled.
    /// <para>Author</para>
    /// Code copied from IDMSDialect.java 
    ///     @author Dave Hearn, CA
    ///     @version 1.00
    /// </remarks>
    public class IdmsDialect : Dialect
    {
        /// <summary></summary>
        public IdmsDialect()
        {
            RegisterColumnType(DbType.AnsiStringFixedLength, "CHAR($l)");
            RegisterColumnType(DbType.AnsiString, "VARCHAR($l)");
            RegisterColumnType(DbType.Binary, "BINARY");
            RegisterColumnType(DbType.Boolean, "BIT");
            RegisterColumnType(DbType.Byte, "TINYINT");
            RegisterColumnType(DbType.Currency, "DECIMAL(16,4)");
            RegisterColumnType(DbType.Date, "DATE");
            RegisterColumnType(DbType.DateTime, "DATETIME");
            RegisterColumnType(DbType.Decimal, "DECIMAL($p, $s)");
            RegisterColumnType(DbType.Double, "DOUBLE PRECISION");
            RegisterColumnType(DbType.Int16, "SMALLINT");
            RegisterColumnType(DbType.Int32, "INT");
            RegisterColumnType(DbType.Int64, "LONGINT");
            RegisterColumnType(DbType.Single, "REAL");
            RegisterColumnType(DbType.StringFixedLength, "CHAR($l)");
            RegisterColumnType(DbType.String, "VARCHAR($l)");
            RegisterColumnType(DbType.Time, "TIME");
        }

        /// <summary> 
        /// Does this dialect support <tt>FOR UPDATE</tt> in conjunction with outer joined rows?
        /// </summary>
        /// <value> True if outer joined rows can be locked via <tt>FOR UPDATE</tt>. </value>
        public override bool SupportsOuterJoinForUpdate
        {
            get { return false; }
        }

        /// <summary> 
        /// Create a <see cref="JoinFragment"/> strategy responsible
        /// for handling this dialect's variations in how joins are handled. 
        /// </summary>
        /// <returns> This dialect's <see cref="JoinFragment"/> strategy. </returns>
        public override JoinFragment CreateOuterJoinFragment()
        {
            return new IdmsJoinFragment();
        }
    }
}